// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Mux16(a=instruction, b=loop, sel=instruction[15], out[0..14]=instr);
    Not(in = instruction[15], out=not15);
    Or(a=not15,b=instruction[5],out=loada);
    ARegister(in[15]= false, in[0..14]=instr, load=loada, out=a, out[0..14]=addressM);
    Mux16(a=a, b=inM, sel=instruction[12], out=aorm);
    And(a=instruction[15], b=instruction[4], out=loadd);
    DRegister(in=loop, load=loadd, out=d);
    ALU(x=d, y=aorm, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outM, out=loop, zr=zero, ng=negative);
    Or(a=negative, b=zero, out=nandn);
    Not(in=nandn,out=gtz);
    And(a=instruction[0], b=gtz, out=gt);
    And(a=instruction[1], b=zero, out=eq);
    Not(in=negative, out=nnegative);
    And(a=instruction[2], b=negative, out=lt);
    Or(a=gt, b=eq, out=gteq);
    Or(a=gteq, b=lt, out=jump);
    And(a=instruction[3],b=instruction[15], out=writeM);
    And(a=jump, b=instruction[15], out=loadpc);
    Not(in=jump, out=increment);
    Or(a=not15, b=increment, out=increment2);
    PC(in=a, load=loadpc, inc= increment2, reset=reset, out[0..14]=pc);
}